OPTION(ENABLE_GCOV "Enable gcov (debug, Linux builds only)" OFF)
IF (ENABLE_GCOV AND NOT WIN32 AND NOT APPLE)
  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage")
  SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage -lgcov")
ENDIF()

macro(use_c99)  
 if (CMAKE_VERSION VERSION_LESS "3.1")
    if (CMAKE_C_COMPILER_ID STREQUAL "GNU")
      set (CMAKE_C_FLAGS "--std=c99 -D_XOPEN_SOURCE=600 ${CMAKE_C_FLAGS}")
    endif ()
  else ()
    set (CMAKE_C_STANDARD 99)
  endif ()
endmacro(use_c99)

macro(use_c11)  
 if (CMAKE_VERSION VERSION_LESS "3.1")
    if (CMAKE_C_COMPILER_ID STREQUAL "GNU")
      set (CMAKE_C_FLAGS "--std=c11 ${CMAKE_C_FLAGS}")
    endif ()
  else ()
    set (CMAKE_C_STANDARD 11)
  endif ()
endmacro(use_c11)

cmake_minimum_required(VERSION 2.8.0)

# Workspace name
project(mysocks)

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Projects
SET(CMAKE_C_FLAGS_DEBUG "$ENV{CFLAGS} ${CMAKE_C_FLAGS_DEBUG}  -O0 -Wall -g -ggdb")
SET(CMAKE_C_FLAGS_RELEASE "$ENV{CFLAGS}  -DNDEBUG")
IF (WIN32)
add_executable(ssclient client.c cipher.c getopt.c main.c s5.c server.c  util.c)
target_link_libraries(ssclient uv crypto ssl ws2_32)
target_link_libraries(ssserver uv crypto ssl ws2_32)
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "MINGW")
add_executable(ssclient client.c cipher.c getopt.c main.c s5.c server.c  util.c)
target_link_libraries(ssclient uv crypto ssl ws2_32)
ELSE()
SET(CMAKE_C_FLAGS_DEBUG "-DHAVE_UNISTD_H=1 ${CMAKE_C_FLAGS_DEBUG}")
add_executable(ssclient client.c cipher.c main.c s5.c server.c  util.c)
target_link_libraries(ssclient uv crypto ssl )
ENDIF()
if("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
    # require at least gcc 4.9
    if (CMAKE_C_COMPILER_VERSION VERSION_LESS 4.9)
        use_c99()
        set_property(TARGET ssclient PROPERTY C_STANDARD 99)
        else()
        use_c11()
        set_property(TARGET ssclient PROPERTY C_STANDARD 11)
    endif()
elseif ("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
    # require at least clang 3.1
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.1)
 use_c99()
 set_property(TARGET ssclient PROPERTY C_STANDARD 99)
 else()
 use_c11()
 set_property(TARGET ssclient PROPERTY C_STANDARD 11)
    endif()
endif()
INSTALL(TARGETS ssclient RUNTIME DESTINATION bin)

OPTION(ENABLE_GCOV "Enable gcov (debug, Linux builds only)" OFF)
IF (ENABLE_GCOV AND NOT WIN32 AND NOT APPLE)
  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} --coverage -fprofile-arcs -ftest-coverage")
  SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} --coverage -fprofile-arcs -ftest-coverage -lgcov")
ENDIF()
 
macro(use_c99)  
 if (CMAKE_VERSION VERSION_LESS "3.1")
    if (CMAKE_C_COMPILER_ID STREQUAL "GNU")
      set (CMAKE_C_FLAGS "--std=c99 -D_XOPEN_SOURCE=600 ${CMAKE_C_FLAGS}")
    endif ()
  else ()
    set (CMAKE_C_STANDARD 99)
  endif ()
endmacro(use_c99)

macro(use_c11)  
 if (CMAKE_VERSION VERSION_LESS "3.1")
    if (CMAKE_C_COMPILER_ID STREQUAL "GNU")
      set (CMAKE_C_FLAGS "--std=c11 ${CMAKE_C_FLAGS}")
    endif ()
  else ()
    set (CMAKE_C_STANDARD 11)
  endif ()
endmacro(use_c11)

cmake_minimum_required(VERSION 2.8.0)

# Workspace name
project(mysocks)
IF (MSVC)
include_directories(gnulib/lib libmd5-rfc libuv-1.11.0/include OpenSSL_1_1_0/include wolfssl-3.2.0)
ELSE()
include_directories(gnulib/lib libmd5-rfc libuv-1.11.0/include wolfssl-3.2.0)
ENDIF()
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
 
# Projects 

SET(CMAKE_C_FLAGS_RELEASE "$ENV{CFLAGS}  -DNDEBUG")
IF (MSVC)
set (CMAKE_C_FLAGS "-D_WIN32_WINNT=0x0600 -D_GNU_SOURCE -DHAVE_UNISTD_H=0 -DWIN32_LEAN_AND_MEAN ${CMAKE_C_FLAGS}")
add_executable(ssclient gnulib/lib/arcfour.c libmd5-rfc/md5.c src/client.c src/cipher.c src/getopt.c src/main.c src/s5.c src/server.c  src/util.c)
target_link_libraries(ssclient iphlpapi psapi userenv uv ws2_32)
add_executable(ssclient-openssl src/client.c src/cipher-openssl.c src/getopt.c src/main.c src/s5.c src/server.c  src/util.c)
target_link_libraries(ssclient-openssl libeay32 iphlpapi psapi userenv uv ws2_32)
set_target_properties ( ssclient-openssl PROPERTIES COMPILE_FLAGS "-DWITH_OPENSSL" )
add_executable(ssclient-wolfssl src/client.c src/cipher-wolfssl.c src/getopt.c src/main.c src/s5.c src/server.c  src/util.c)
target_link_libraries(ssclient-wolfssl ctaocrypt iphlpapi psapi userenv uv ws2_32)
set_target_properties ( ssclient-wolfssl PROPERTIES COMPILE_FLAGS "-DWITH_WOLFSSL" )
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "MINGW")
set (CMAKE_C_FLAGS "-D_WIN32 -D_WIN32_WINNT=0x0600 -D_GNU_SOURCE -DHAVE_UNISTD_H=0 ${CMAKE_C_FLAGS}")
IF(CMAKE_SYSTEM_NAME MATCHES "MINGW32")
set (CMAKE_C_FLAGS "-I/mingw32/include ${CMAKE_C_FLAGS}")
ELSE()
set (CMAKE_C_FLAGS "-I/mingw64/include ${CMAKE_C_FLAGS}")
ENDIF()
add_executable(ssclient gnulib/lib/arcfour.c libmd5-rfc/md5.c src/client.c src/cipher.c src/getopt.c src/main.c src/s5.c src/server.c  src/util.c)
target_link_libraries(ssclient uv ws2_32)
add_executable(ssclient-openssl src/client.c src/cipher-openssl.c src/getopt.c src/main.c src/s5.c src/server.c  src/util.c)
target_link_libraries(ssclient-openssl uv crypto ssl ws2_32)
set_target_properties ( ssclient-openssl PROPERTIES COMPILE_FLAGS "-DWITH_OPENSSL" )
add_executable(ssclient-wolfssl src/client.c src/cipher-wolfssl.c src/getopt.c src/main.c src/s5.c src/server.c  src/util.c)
target_link_libraries(ssclient-wolfssl uv cyassl ws2_32)
set_target_properties ( ssclient-wolfssl PROPERTIES COMPILE_FLAGS "-DWITH_WOLFSSL" )
ELSE()
SET(CMAKE_C_FLAGS_DEBUG "-DHAVE_UNISTD_H=1 ${CMAKE_C_FLAGS_DEBUG}")
SET(CMAKE_C_FLAGS_RELEASE "-DHAVE_UNISTD_H=1 ${CMAKE_C_FLAGS_RELEASE}")
link_directories(/usr/local/lib)
add_executable(ssclient gnulib/lib/arcfour.c libmd5-rfc/md5.c src/client.c src/cipher.c src/main.c src/s5.c src/server.c  src/util.c)
target_link_libraries(ssclient uv )
add_executable(ssclient-openssl src/client.c src/cipher-openssl.c src/main.c src/s5.c src/server.c  src/util.c)
target_link_libraries(ssclient-openssl uv crypto ssl)
set_target_properties ( ssclient-openssl PROPERTIES COMPILE_FLAGS "-DWITH_OPENSSL" )
add_executable(ssclient-wolfssl src/client.c src/cipher-wolfssl.c src/main.c src/s5.c src/server.c  src/util.c)
target_link_libraries(ssclient-wolfssl cyassl uv)
set_target_properties ( ssclient-wolfssl PROPERTIES COMPILE_FLAGS "-DWITH_WOLFSSL" )
ENDIF()
if("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
SET(CMAKE_C_FLAGS_DEBUG "$ENV{CFLAGS} ${CMAKE_C_FLAGS_DEBUG}  -O0 -Wall -g -ggdb")
    # require at least gcc 4.9
    if (CMAKE_C_COMPILER_VERSION VERSION_LESS 4.9)
        use_c99()
        set_property(TARGET ssclient PROPERTY C_STANDARD 99)
        set_property(TARGET ssclient-openssl PROPERTY C_STANDARD 99)
        else()
        use_c11()
        set_property(TARGET ssclient PROPERTY C_STANDARD 11)
        set_property(TARGET ssclient-openssl PROPERTY C_STANDARD 11)
    endif()
elseif ("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
    # require at least clang 3.1
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.1)
 use_c99()
 set_property(TARGET ssclient PROPERTY C_STANDARD 99)
 set_property(TARGET ssclient-openssl PROPERTY C_STANDARD 99)
 else()
 use_c11()
 set_property(TARGET ssclient PROPERTY C_STANDARD 11)
 set_property(TARGET ssclient-openssl PROPERTY C_STANDARD 11)
    endif()
endif()
enable_testing()
install(TARGETS ssclient RUNTIME DESTINATION bin)
install(TARGETS ssclient-openssl RUNTIME DESTINATION bin)
install(TARGETS ssclient-wolfssl RUNTIME DESTINATION bin)

